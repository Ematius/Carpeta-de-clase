generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Film {
  id          String   @id @default(uuid()) @map("film_id")
  title       String
  description String
  releaseYear Int      @map("release_year")
  rating      Float
  director    String
  duration    Int
  poster      String
  createdAt   DateTime @default(now()) @ignore
  updatedAt   DateTime @updatedAt @ignore
  //esto es una relaci√≥n N:M al poner films Films[] en la entidad Category, se crea una tabla intermedia directamente
  categories Category[]

  @@unique([title, releaseYear])
  @@index([title])
  @@map("films")
}

model Category {
  id        String   @id @default(uuid()) @map("category_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  films Film[]

  @@map("categories")
}


model User {
  id        String   @id @default(uuid()) @map("user_id")
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @ignore
  updatedAt DateTime @updatedAt @ignore

  notes   Notes[]
  profile Profile?

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid()) @map("profile_id")
  bio       String
  createdAt DateTime @default(now()) @ignore
  updatedAt DateTime @updatedAt @ignore

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("profiles")
}

model Notes {
  id        String   @id @default(uuid()) @map("note_id")
  content   String
  createAt  DateTime @default(now()) @ignore
  updatedAt DateTime @updatedAt @ignore

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("notes")
}
